/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.bysoftware.ct.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import it.bysoftware.ct.model.WKTestataDocumento;
import it.bysoftware.ct.model.WKTestataDocumentoModel;
import it.bysoftware.ct.model.WKTestataDocumentoSoap;
import it.bysoftware.ct.service.persistence.WKTestataDocumentoPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WKTestataDocumento service. Represents a row in the &quot;WK_SSTESORD&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.bysoftware.ct.model.WKTestataDocumentoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WKTestataDocumentoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WKTestataDocumentoImpl
 * @see it.bysoftware.ct.model.WKTestataDocumento
 * @see it.bysoftware.ct.model.WKTestataDocumentoModel
 * @generated
 */
@JSON(strict = true)
public class WKTestataDocumentoModelImpl extends BaseModelImpl<WKTestataDocumento>
	implements WKTestataDocumentoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a w k testata documento model instance should use the {@link it.bysoftware.ct.model.WKTestataDocumento} interface instead.
	 */
	public static final String TABLE_NAME = "WK_SSTESORD";
	public static final Object[][] TABLE_COLUMNS = {
			{ "WKAnno", Types.INTEGER },
			{ "WKNOrd", Types.BIGINT },
			{ "WkCodsog", Types.VARCHAR },
			{ "WkDatord", Types.VARCHAR },
			{ "WkDatcon", Types.VARCHAR },
			{ "WkDesti2", Types.VARCHAR },
			{ "WkDesdiv", Types.VARCHAR },
			{ "WkRagsoc", Types.VARCHAR },
			{ "WKCompleto", Types.VARCHAR },
			{ "WkOperatore", Types.VARCHAR },
			{ "WKVisto", Types.INTEGER },
			{ "WKInviato", Types.INTEGER },
			{ "WKLotto", Types.VARCHAR },
			{ "WKTipdoc", Types.VARCHAR },
			{ "WkVettore", Types.VARCHAR },
			{ "WkAutista", Types.VARCHAR },
			{ "WkTelefono", Types.VARCHAR },
			{ "WKCentro", Types.VARCHAR },
			{ "EpalCaricati", Types.INTEGER },
			{ "EpalScaricati", Types.INTEGER },
			{ "CodDestiVett1", Types.VARCHAR },
			{ "DestiVett1", Types.VARCHAR },
			{ "Nota1", Types.VARCHAR },
			{ "Nota2", Types.VARCHAR },
			{ "Rigodescrittivo", Types.VARCHAR },
			{ "WkVettore2", Types.VARCHAR },
			{ "TraspCura", Types.VARCHAR },
			{ "AspEst", Types.VARCHAR },
			{ "CauTrasp", Types.VARCHAR },
			{ "porto", Types.VARCHAR },
			{ "Origine", Types.VARCHAR },
			{ "NpedEpal", Types.INTEGER },
			{ "NpedNormali", Types.INTEGER },
			{ "CostoTrasp", Types.DOUBLE },
			{ "TotPedOrd", Types.INTEGER },
			{ "TargaCamion", Types.VARCHAR },
			{ "TargaRimorchio", Types.VARCHAR },
			{ "id_associato", Types.BIGINT },
			{ "verificato", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table WK_SSTESORD (WKAnno INTEGER not null,WKNOrd LONG not null,WkCodsog VARCHAR(75) null,WkDatord VARCHAR(75) null,WkDatcon VARCHAR(75) null,WkDesti2 VARCHAR(75) null,WkDesdiv VARCHAR(75) null,WkRagsoc VARCHAR(75) null,WKCompleto VARCHAR(75) null,WkOperatore VARCHAR(75) null,WKVisto INTEGER,WKInviato INTEGER,WKLotto VARCHAR(75) null,WKTipdoc VARCHAR(75) not null,WkVettore VARCHAR(75) null,WkAutista VARCHAR(75) null,WkTelefono VARCHAR(75) null,WKCentro VARCHAR(75) null,EpalCaricati INTEGER,EpalScaricati INTEGER,CodDestiVett1 VARCHAR(75) null,DestiVett1 VARCHAR(75) null,Nota1 VARCHAR(75) null,Nota2 VARCHAR(75) null,Rigodescrittivo VARCHAR(75) null,WkVettore2 VARCHAR(75) null,TraspCura VARCHAR(75) null,AspEst VARCHAR(75) null,CauTrasp VARCHAR(75) null,porto VARCHAR(75) null,Origine VARCHAR(75) null,NpedEpal INTEGER,NpedNormali INTEGER,CostoTrasp DOUBLE,TotPedOrd INTEGER,TargaCamion VARCHAR(75) null,TargaRimorchio VARCHAR(75) null,id_associato LONG not null,verificato BOOLEAN,primary key (WKAnno, WKNOrd, WKTipdoc, id_associato))";
	public static final String TABLE_SQL_DROP = "drop table WK_SSTESORD";
	public static final String ORDER_BY_JPQL = " ORDER BY wkTestataDocumento.id.numeroOrdine ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WK_SSTESORD.WKNOrd ASC";
	public static final String DATA_SOURCE = "gestionaleOPDataSource";
	public static final String SESSION_FACTORY = "gestionaleOPSessionFactory";
	public static final String TX_MANAGER = "gestionaleOPTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.bysoftware.ct.model.WKTestataDocumento"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.bysoftware.ct.model.WKTestataDocumento"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.bysoftware.ct.model.WKTestataDocumento"),
			true);
	public static long ANNO_COLUMN_BITMASK = 1L;
	public static long IDASSOCIATO_COLUMN_BITMASK = 2L;
	public static long VERIFICATO_COLUMN_BITMASK = 4L;
	public static long NUMEROORDINE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WKTestataDocumento toModel(WKTestataDocumentoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WKTestataDocumento model = new WKTestataDocumentoImpl();

		model.setAnno(soapModel.getAnno());
		model.setNumeroOrdine(soapModel.getNumeroOrdine());
		model.setCodiceSoggetto(soapModel.getCodiceSoggetto());
		model.setDataOrdine(soapModel.getDataOrdine());
		model.setDataConsegna(soapModel.getDataConsegna());
		model.setDestinazione(soapModel.getDestinazione());
		model.setCodiceDestinazione(soapModel.getCodiceDestinazione());
		model.setRagioneSociale(soapModel.getRagioneSociale());
		model.setCompleto(soapModel.getCompleto());
		model.setOperatore(soapModel.getOperatore());
		model.setVisto(soapModel.getVisto());
		model.setInviato(soapModel.getInviato());
		model.setLotto(soapModel.getLotto());
		model.setTipoDocumento(soapModel.getTipoDocumento());
		model.setVettore(soapModel.getVettore());
		model.setAutista(soapModel.getAutista());
		model.setTelefono(soapModel.getTelefono());
		model.setCentro(soapModel.getCentro());
		model.setPalletCaricati(soapModel.getPalletCaricati());
		model.setPalletScaricati(soapModel.getPalletScaricati());
		model.setCodiceVettore(soapModel.getCodiceVettore());
		model.setDestinazioneVettore(soapModel.getDestinazioneVettore());
		model.setNota1(soapModel.getNota1());
		model.setNota2(soapModel.getNota2());
		model.setRigoDescrittivo(soapModel.getRigoDescrittivo());
		model.setVettore2(soapModel.getVettore2());
		model.setCuraTrasporto(soapModel.getCuraTrasporto());
		model.setAspettoEsteriore(soapModel.getAspettoEsteriore());
		model.setCausaleTrasporto(soapModel.getCausaleTrasporto());
		model.setPorto(soapModel.getPorto());
		model.setOrigine(soapModel.getOrigine());
		model.setNumeroPedaneEuro(soapModel.getNumeroPedaneEuro());
		model.setNumeroPedaneNormali(soapModel.getNumeroPedaneNormali());
		model.setCostoTrasporto(soapModel.getCostoTrasporto());
		model.setTotalePedaneOrdine(soapModel.getTotalePedaneOrdine());
		model.setTargaCamion(soapModel.getTargaCamion());
		model.setTargaRimorchio(soapModel.getTargaRimorchio());
		model.setIdAssociato(soapModel.getIdAssociato());
		model.setVerificato(soapModel.getVerificato());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WKTestataDocumento> toModels(
		WKTestataDocumentoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WKTestataDocumento> models = new ArrayList<WKTestataDocumento>(soapModels.length);

		for (WKTestataDocumentoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.bysoftware.ct.model.WKTestataDocumento"));

	public WKTestataDocumentoModelImpl() {
	}

	@Override
	public WKTestataDocumentoPK getPrimaryKey() {
		return new WKTestataDocumentoPK(_anno, _numeroOrdine, _tipoDocumento,
			_idAssociato);
	}

	@Override
	public void setPrimaryKey(WKTestataDocumentoPK primaryKey) {
		setAnno(primaryKey.anno);
		setNumeroOrdine(primaryKey.numeroOrdine);
		setTipoDocumento(primaryKey.tipoDocumento);
		setIdAssociato(primaryKey.idAssociato);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new WKTestataDocumentoPK(_anno, _numeroOrdine, _tipoDocumento,
			_idAssociato);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((WKTestataDocumentoPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return WKTestataDocumento.class;
	}

	@Override
	public String getModelClassName() {
		return WKTestataDocumento.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("anno", getAnno());
		attributes.put("numeroOrdine", getNumeroOrdine());
		attributes.put("codiceSoggetto", getCodiceSoggetto());
		attributes.put("dataOrdine", getDataOrdine());
		attributes.put("dataConsegna", getDataConsegna());
		attributes.put("destinazione", getDestinazione());
		attributes.put("codiceDestinazione", getCodiceDestinazione());
		attributes.put("ragioneSociale", getRagioneSociale());
		attributes.put("completo", getCompleto());
		attributes.put("operatore", getOperatore());
		attributes.put("visto", getVisto());
		attributes.put("inviato", getInviato());
		attributes.put("lotto", getLotto());
		attributes.put("tipoDocumento", getTipoDocumento());
		attributes.put("vettore", getVettore());
		attributes.put("autista", getAutista());
		attributes.put("telefono", getTelefono());
		attributes.put("centro", getCentro());
		attributes.put("palletCaricati", getPalletCaricati());
		attributes.put("palletScaricati", getPalletScaricati());
		attributes.put("codiceVettore", getCodiceVettore());
		attributes.put("destinazioneVettore", getDestinazioneVettore());
		attributes.put("nota1", getNota1());
		attributes.put("nota2", getNota2());
		attributes.put("rigoDescrittivo", getRigoDescrittivo());
		attributes.put("vettore2", getVettore2());
		attributes.put("curaTrasporto", getCuraTrasporto());
		attributes.put("aspettoEsteriore", getAspettoEsteriore());
		attributes.put("causaleTrasporto", getCausaleTrasporto());
		attributes.put("porto", getPorto());
		attributes.put("origine", getOrigine());
		attributes.put("numeroPedaneEuro", getNumeroPedaneEuro());
		attributes.put("numeroPedaneNormali", getNumeroPedaneNormali());
		attributes.put("costoTrasporto", getCostoTrasporto());
		attributes.put("totalePedaneOrdine", getTotalePedaneOrdine());
		attributes.put("targaCamion", getTargaCamion());
		attributes.put("targaRimorchio", getTargaRimorchio());
		attributes.put("idAssociato", getIdAssociato());
		attributes.put("verificato", getVerificato());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer anno = (Integer)attributes.get("anno");

		if (anno != null) {
			setAnno(anno);
		}

		Long numeroOrdine = (Long)attributes.get("numeroOrdine");

		if (numeroOrdine != null) {
			setNumeroOrdine(numeroOrdine);
		}

		String codiceSoggetto = (String)attributes.get("codiceSoggetto");

		if (codiceSoggetto != null) {
			setCodiceSoggetto(codiceSoggetto);
		}

		String dataOrdine = (String)attributes.get("dataOrdine");

		if (dataOrdine != null) {
			setDataOrdine(dataOrdine);
		}

		String dataConsegna = (String)attributes.get("dataConsegna");

		if (dataConsegna != null) {
			setDataConsegna(dataConsegna);
		}

		String destinazione = (String)attributes.get("destinazione");

		if (destinazione != null) {
			setDestinazione(destinazione);
		}

		String codiceDestinazione = (String)attributes.get("codiceDestinazione");

		if (codiceDestinazione != null) {
			setCodiceDestinazione(codiceDestinazione);
		}

		String ragioneSociale = (String)attributes.get("ragioneSociale");

		if (ragioneSociale != null) {
			setRagioneSociale(ragioneSociale);
		}

		String completo = (String)attributes.get("completo");

		if (completo != null) {
			setCompleto(completo);
		}

		String operatore = (String)attributes.get("operatore");

		if (operatore != null) {
			setOperatore(operatore);
		}

		Integer visto = (Integer)attributes.get("visto");

		if (visto != null) {
			setVisto(visto);
		}

		Integer inviato = (Integer)attributes.get("inviato");

		if (inviato != null) {
			setInviato(inviato);
		}

		String lotto = (String)attributes.get("lotto");

		if (lotto != null) {
			setLotto(lotto);
		}

		String tipoDocumento = (String)attributes.get("tipoDocumento");

		if (tipoDocumento != null) {
			setTipoDocumento(tipoDocumento);
		}

		String vettore = (String)attributes.get("vettore");

		if (vettore != null) {
			setVettore(vettore);
		}

		String autista = (String)attributes.get("autista");

		if (autista != null) {
			setAutista(autista);
		}

		String telefono = (String)attributes.get("telefono");

		if (telefono != null) {
			setTelefono(telefono);
		}

		String centro = (String)attributes.get("centro");

		if (centro != null) {
			setCentro(centro);
		}

		Integer palletCaricati = (Integer)attributes.get("palletCaricati");

		if (palletCaricati != null) {
			setPalletCaricati(palletCaricati);
		}

		Integer palletScaricati = (Integer)attributes.get("palletScaricati");

		if (palletScaricati != null) {
			setPalletScaricati(palletScaricati);
		}

		String codiceVettore = (String)attributes.get("codiceVettore");

		if (codiceVettore != null) {
			setCodiceVettore(codiceVettore);
		}

		String destinazioneVettore = (String)attributes.get(
				"destinazioneVettore");

		if (destinazioneVettore != null) {
			setDestinazioneVettore(destinazioneVettore);
		}

		String nota1 = (String)attributes.get("nota1");

		if (nota1 != null) {
			setNota1(nota1);
		}

		String nota2 = (String)attributes.get("nota2");

		if (nota2 != null) {
			setNota2(nota2);
		}

		String rigoDescrittivo = (String)attributes.get("rigoDescrittivo");

		if (rigoDescrittivo != null) {
			setRigoDescrittivo(rigoDescrittivo);
		}

		String vettore2 = (String)attributes.get("vettore2");

		if (vettore2 != null) {
			setVettore2(vettore2);
		}

		String curaTrasporto = (String)attributes.get("curaTrasporto");

		if (curaTrasporto != null) {
			setCuraTrasporto(curaTrasporto);
		}

		String aspettoEsteriore = (String)attributes.get("aspettoEsteriore");

		if (aspettoEsteriore != null) {
			setAspettoEsteriore(aspettoEsteriore);
		}

		String causaleTrasporto = (String)attributes.get("causaleTrasporto");

		if (causaleTrasporto != null) {
			setCausaleTrasporto(causaleTrasporto);
		}

		String porto = (String)attributes.get("porto");

		if (porto != null) {
			setPorto(porto);
		}

		String origine = (String)attributes.get("origine");

		if (origine != null) {
			setOrigine(origine);
		}

		Integer numeroPedaneEuro = (Integer)attributes.get("numeroPedaneEuro");

		if (numeroPedaneEuro != null) {
			setNumeroPedaneEuro(numeroPedaneEuro);
		}

		Integer numeroPedaneNormali = (Integer)attributes.get(
				"numeroPedaneNormali");

		if (numeroPedaneNormali != null) {
			setNumeroPedaneNormali(numeroPedaneNormali);
		}

		Double costoTrasporto = (Double)attributes.get("costoTrasporto");

		if (costoTrasporto != null) {
			setCostoTrasporto(costoTrasporto);
		}

		Integer totalePedaneOrdine = (Integer)attributes.get(
				"totalePedaneOrdine");

		if (totalePedaneOrdine != null) {
			setTotalePedaneOrdine(totalePedaneOrdine);
		}

		String targaCamion = (String)attributes.get("targaCamion");

		if (targaCamion != null) {
			setTargaCamion(targaCamion);
		}

		String targaRimorchio = (String)attributes.get("targaRimorchio");

		if (targaRimorchio != null) {
			setTargaRimorchio(targaRimorchio);
		}

		Long idAssociato = (Long)attributes.get("idAssociato");

		if (idAssociato != null) {
			setIdAssociato(idAssociato);
		}

		Boolean verificato = (Boolean)attributes.get("verificato");

		if (verificato != null) {
			setVerificato(verificato);
		}
	}

	@JSON
	@Override
	public int getAnno() {
		return _anno;
	}

	@Override
	public void setAnno(int anno) {
		_columnBitmask |= ANNO_COLUMN_BITMASK;

		if (!_setOriginalAnno) {
			_setOriginalAnno = true;

			_originalAnno = _anno;
		}

		_anno = anno;
	}

	public int getOriginalAnno() {
		return _originalAnno;
	}

	@JSON
	@Override
	public long getNumeroOrdine() {
		return _numeroOrdine;
	}

	@Override
	public void setNumeroOrdine(long numeroOrdine) {
		_columnBitmask = -1L;

		_numeroOrdine = numeroOrdine;
	}

	@JSON
	@Override
	public String getCodiceSoggetto() {
		if (_codiceSoggetto == null) {
			return StringPool.BLANK;
		}
		else {
			return _codiceSoggetto;
		}
	}

	@Override
	public void setCodiceSoggetto(String codiceSoggetto) {
		_codiceSoggetto = codiceSoggetto;
	}

	@JSON
	@Override
	public String getDataOrdine() {
		if (_dataOrdine == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataOrdine;
		}
	}

	@Override
	public void setDataOrdine(String dataOrdine) {
		_dataOrdine = dataOrdine;
	}

	@JSON
	@Override
	public String getDataConsegna() {
		if (_dataConsegna == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataConsegna;
		}
	}

	@Override
	public void setDataConsegna(String dataConsegna) {
		_dataConsegna = dataConsegna;
	}

	@JSON
	@Override
	public String getDestinazione() {
		if (_destinazione == null) {
			return StringPool.BLANK;
		}
		else {
			return _destinazione;
		}
	}

	@Override
	public void setDestinazione(String destinazione) {
		_destinazione = destinazione;
	}

	@JSON
	@Override
	public String getCodiceDestinazione() {
		if (_codiceDestinazione == null) {
			return StringPool.BLANK;
		}
		else {
			return _codiceDestinazione;
		}
	}

	@Override
	public void setCodiceDestinazione(String codiceDestinazione) {
		_codiceDestinazione = codiceDestinazione;
	}

	@JSON
	@Override
	public String getRagioneSociale() {
		if (_ragioneSociale == null) {
			return StringPool.BLANK;
		}
		else {
			return _ragioneSociale;
		}
	}

	@Override
	public void setRagioneSociale(String ragioneSociale) {
		_ragioneSociale = ragioneSociale;
	}

	@JSON
	@Override
	public String getCompleto() {
		if (_completo == null) {
			return StringPool.BLANK;
		}
		else {
			return _completo;
		}
	}

	@Override
	public void setCompleto(String completo) {
		_completo = completo;
	}

	@JSON
	@Override
	public String getOperatore() {
		if (_operatore == null) {
			return StringPool.BLANK;
		}
		else {
			return _operatore;
		}
	}

	@Override
	public void setOperatore(String operatore) {
		_operatore = operatore;
	}

	@JSON
	@Override
	public int getVisto() {
		return _visto;
	}

	@Override
	public void setVisto(int visto) {
		_visto = visto;
	}

	@JSON
	@Override
	public int getInviato() {
		return _inviato;
	}

	@Override
	public void setInviato(int inviato) {
		_inviato = inviato;
	}

	@JSON
	@Override
	public String getLotto() {
		if (_lotto == null) {
			return StringPool.BLANK;
		}
		else {
			return _lotto;
		}
	}

	@Override
	public void setLotto(String lotto) {
		_lotto = lotto;
	}

	@JSON
	@Override
	public String getTipoDocumento() {
		if (_tipoDocumento == null) {
			return StringPool.BLANK;
		}
		else {
			return _tipoDocumento;
		}
	}

	@Override
	public void setTipoDocumento(String tipoDocumento) {
		_tipoDocumento = tipoDocumento;
	}

	@JSON
	@Override
	public String getVettore() {
		if (_vettore == null) {
			return StringPool.BLANK;
		}
		else {
			return _vettore;
		}
	}

	@Override
	public void setVettore(String vettore) {
		_vettore = vettore;
	}

	@JSON
	@Override
	public String getAutista() {
		if (_autista == null) {
			return StringPool.BLANK;
		}
		else {
			return _autista;
		}
	}

	@Override
	public void setAutista(String autista) {
		_autista = autista;
	}

	@JSON
	@Override
	public String getTelefono() {
		if (_telefono == null) {
			return StringPool.BLANK;
		}
		else {
			return _telefono;
		}
	}

	@Override
	public void setTelefono(String telefono) {
		_telefono = telefono;
	}

	@JSON
	@Override
	public String getCentro() {
		if (_centro == null) {
			return StringPool.BLANK;
		}
		else {
			return _centro;
		}
	}

	@Override
	public void setCentro(String centro) {
		_centro = centro;
	}

	@JSON
	@Override
	public int getPalletCaricati() {
		return _palletCaricati;
	}

	@Override
	public void setPalletCaricati(int palletCaricati) {
		_palletCaricati = palletCaricati;
	}

	@JSON
	@Override
	public int getPalletScaricati() {
		return _palletScaricati;
	}

	@Override
	public void setPalletScaricati(int palletScaricati) {
		_palletScaricati = palletScaricati;
	}

	@JSON
	@Override
	public String getCodiceVettore() {
		if (_codiceVettore == null) {
			return StringPool.BLANK;
		}
		else {
			return _codiceVettore;
		}
	}

	@Override
	public void setCodiceVettore(String codiceVettore) {
		_codiceVettore = codiceVettore;
	}

	@JSON
	@Override
	public String getDestinazioneVettore() {
		if (_destinazioneVettore == null) {
			return StringPool.BLANK;
		}
		else {
			return _destinazioneVettore;
		}
	}

	@Override
	public void setDestinazioneVettore(String destinazioneVettore) {
		_destinazioneVettore = destinazioneVettore;
	}

	@JSON
	@Override
	public String getNota1() {
		if (_nota1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _nota1;
		}
	}

	@Override
	public void setNota1(String nota1) {
		_nota1 = nota1;
	}

	@JSON
	@Override
	public String getNota2() {
		if (_nota2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _nota2;
		}
	}

	@Override
	public void setNota2(String nota2) {
		_nota2 = nota2;
	}

	@JSON
	@Override
	public String getRigoDescrittivo() {
		if (_rigoDescrittivo == null) {
			return StringPool.BLANK;
		}
		else {
			return _rigoDescrittivo;
		}
	}

	@Override
	public void setRigoDescrittivo(String rigoDescrittivo) {
		_rigoDescrittivo = rigoDescrittivo;
	}

	@JSON
	@Override
	public String getVettore2() {
		if (_vettore2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _vettore2;
		}
	}

	@Override
	public void setVettore2(String vettore2) {
		_vettore2 = vettore2;
	}

	@JSON
	@Override
	public String getCuraTrasporto() {
		if (_curaTrasporto == null) {
			return StringPool.BLANK;
		}
		else {
			return _curaTrasporto;
		}
	}

	@Override
	public void setCuraTrasporto(String curaTrasporto) {
		_curaTrasporto = curaTrasporto;
	}

	@JSON
	@Override
	public String getAspettoEsteriore() {
		if (_aspettoEsteriore == null) {
			return StringPool.BLANK;
		}
		else {
			return _aspettoEsteriore;
		}
	}

	@Override
	public void setAspettoEsteriore(String aspettoEsteriore) {
		_aspettoEsteriore = aspettoEsteriore;
	}

	@JSON
	@Override
	public String getCausaleTrasporto() {
		if (_causaleTrasporto == null) {
			return StringPool.BLANK;
		}
		else {
			return _causaleTrasporto;
		}
	}

	@Override
	public void setCausaleTrasporto(String causaleTrasporto) {
		_causaleTrasporto = causaleTrasporto;
	}

	@JSON
	@Override
	public String getPorto() {
		if (_porto == null) {
			return StringPool.BLANK;
		}
		else {
			return _porto;
		}
	}

	@Override
	public void setPorto(String porto) {
		_porto = porto;
	}

	@JSON
	@Override
	public String getOrigine() {
		if (_origine == null) {
			return StringPool.BLANK;
		}
		else {
			return _origine;
		}
	}

	@Override
	public void setOrigine(String origine) {
		_origine = origine;
	}

	@JSON
	@Override
	public int getNumeroPedaneEuro() {
		return _numeroPedaneEuro;
	}

	@Override
	public void setNumeroPedaneEuro(int numeroPedaneEuro) {
		_numeroPedaneEuro = numeroPedaneEuro;
	}

	@JSON
	@Override
	public int getNumeroPedaneNormali() {
		return _numeroPedaneNormali;
	}

	@Override
	public void setNumeroPedaneNormali(int numeroPedaneNormali) {
		_numeroPedaneNormali = numeroPedaneNormali;
	}

	@JSON
	@Override
	public double getCostoTrasporto() {
		return _costoTrasporto;
	}

	@Override
	public void setCostoTrasporto(double costoTrasporto) {
		_costoTrasporto = costoTrasporto;
	}

	@JSON
	@Override
	public int getTotalePedaneOrdine() {
		return _totalePedaneOrdine;
	}

	@Override
	public void setTotalePedaneOrdine(int totalePedaneOrdine) {
		_totalePedaneOrdine = totalePedaneOrdine;
	}

	@JSON
	@Override
	public String getTargaCamion() {
		if (_targaCamion == null) {
			return StringPool.BLANK;
		}
		else {
			return _targaCamion;
		}
	}

	@Override
	public void setTargaCamion(String targaCamion) {
		_targaCamion = targaCamion;
	}

	@JSON
	@Override
	public String getTargaRimorchio() {
		if (_targaRimorchio == null) {
			return StringPool.BLANK;
		}
		else {
			return _targaRimorchio;
		}
	}

	@Override
	public void setTargaRimorchio(String targaRimorchio) {
		_targaRimorchio = targaRimorchio;
	}

	@JSON
	@Override
	public long getIdAssociato() {
		return _idAssociato;
	}

	@Override
	public void setIdAssociato(long idAssociato) {
		_columnBitmask |= IDASSOCIATO_COLUMN_BITMASK;

		if (!_setOriginalIdAssociato) {
			_setOriginalIdAssociato = true;

			_originalIdAssociato = _idAssociato;
		}

		_idAssociato = idAssociato;
	}

	public long getOriginalIdAssociato() {
		return _originalIdAssociato;
	}

	@JSON
	@Override
	public boolean getVerificato() {
		return _verificato;
	}

	@Override
	public boolean isVerificato() {
		return _verificato;
	}

	@Override
	public void setVerificato(boolean verificato) {
		_columnBitmask |= VERIFICATO_COLUMN_BITMASK;

		if (!_setOriginalVerificato) {
			_setOriginalVerificato = true;

			_originalVerificato = _verificato;
		}

		_verificato = verificato;
	}

	public boolean getOriginalVerificato() {
		return _originalVerificato;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public WKTestataDocumento toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WKTestataDocumento)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WKTestataDocumentoImpl wkTestataDocumentoImpl = new WKTestataDocumentoImpl();

		wkTestataDocumentoImpl.setAnno(getAnno());
		wkTestataDocumentoImpl.setNumeroOrdine(getNumeroOrdine());
		wkTestataDocumentoImpl.setCodiceSoggetto(getCodiceSoggetto());
		wkTestataDocumentoImpl.setDataOrdine(getDataOrdine());
		wkTestataDocumentoImpl.setDataConsegna(getDataConsegna());
		wkTestataDocumentoImpl.setDestinazione(getDestinazione());
		wkTestataDocumentoImpl.setCodiceDestinazione(getCodiceDestinazione());
		wkTestataDocumentoImpl.setRagioneSociale(getRagioneSociale());
		wkTestataDocumentoImpl.setCompleto(getCompleto());
		wkTestataDocumentoImpl.setOperatore(getOperatore());
		wkTestataDocumentoImpl.setVisto(getVisto());
		wkTestataDocumentoImpl.setInviato(getInviato());
		wkTestataDocumentoImpl.setLotto(getLotto());
		wkTestataDocumentoImpl.setTipoDocumento(getTipoDocumento());
		wkTestataDocumentoImpl.setVettore(getVettore());
		wkTestataDocumentoImpl.setAutista(getAutista());
		wkTestataDocumentoImpl.setTelefono(getTelefono());
		wkTestataDocumentoImpl.setCentro(getCentro());
		wkTestataDocumentoImpl.setPalletCaricati(getPalletCaricati());
		wkTestataDocumentoImpl.setPalletScaricati(getPalletScaricati());
		wkTestataDocumentoImpl.setCodiceVettore(getCodiceVettore());
		wkTestataDocumentoImpl.setDestinazioneVettore(getDestinazioneVettore());
		wkTestataDocumentoImpl.setNota1(getNota1());
		wkTestataDocumentoImpl.setNota2(getNota2());
		wkTestataDocumentoImpl.setRigoDescrittivo(getRigoDescrittivo());
		wkTestataDocumentoImpl.setVettore2(getVettore2());
		wkTestataDocumentoImpl.setCuraTrasporto(getCuraTrasporto());
		wkTestataDocumentoImpl.setAspettoEsteriore(getAspettoEsteriore());
		wkTestataDocumentoImpl.setCausaleTrasporto(getCausaleTrasporto());
		wkTestataDocumentoImpl.setPorto(getPorto());
		wkTestataDocumentoImpl.setOrigine(getOrigine());
		wkTestataDocumentoImpl.setNumeroPedaneEuro(getNumeroPedaneEuro());
		wkTestataDocumentoImpl.setNumeroPedaneNormali(getNumeroPedaneNormali());
		wkTestataDocumentoImpl.setCostoTrasporto(getCostoTrasporto());
		wkTestataDocumentoImpl.setTotalePedaneOrdine(getTotalePedaneOrdine());
		wkTestataDocumentoImpl.setTargaCamion(getTargaCamion());
		wkTestataDocumentoImpl.setTargaRimorchio(getTargaRimorchio());
		wkTestataDocumentoImpl.setIdAssociato(getIdAssociato());
		wkTestataDocumentoImpl.setVerificato(getVerificato());

		wkTestataDocumentoImpl.resetOriginalValues();

		return wkTestataDocumentoImpl;
	}

	@Override
	public int compareTo(WKTestataDocumento wkTestataDocumento) {
		int value = 0;

		if (getNumeroOrdine() < wkTestataDocumento.getNumeroOrdine()) {
			value = -1;
		}
		else if (getNumeroOrdine() > wkTestataDocumento.getNumeroOrdine()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WKTestataDocumento)) {
			return false;
		}

		WKTestataDocumento wkTestataDocumento = (WKTestataDocumento)obj;

		WKTestataDocumentoPK primaryKey = wkTestataDocumento.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		WKTestataDocumentoModelImpl wkTestataDocumentoModelImpl = this;

		wkTestataDocumentoModelImpl._originalAnno = wkTestataDocumentoModelImpl._anno;

		wkTestataDocumentoModelImpl._setOriginalAnno = false;

		wkTestataDocumentoModelImpl._originalIdAssociato = wkTestataDocumentoModelImpl._idAssociato;

		wkTestataDocumentoModelImpl._setOriginalIdAssociato = false;

		wkTestataDocumentoModelImpl._originalVerificato = wkTestataDocumentoModelImpl._verificato;

		wkTestataDocumentoModelImpl._setOriginalVerificato = false;

		wkTestataDocumentoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WKTestataDocumento> toCacheModel() {
		WKTestataDocumentoCacheModel wkTestataDocumentoCacheModel = new WKTestataDocumentoCacheModel();

		wkTestataDocumentoCacheModel.anno = getAnno();

		wkTestataDocumentoCacheModel.numeroOrdine = getNumeroOrdine();

		wkTestataDocumentoCacheModel.codiceSoggetto = getCodiceSoggetto();

		String codiceSoggetto = wkTestataDocumentoCacheModel.codiceSoggetto;

		if ((codiceSoggetto != null) && (codiceSoggetto.length() == 0)) {
			wkTestataDocumentoCacheModel.codiceSoggetto = null;
		}

		wkTestataDocumentoCacheModel.dataOrdine = getDataOrdine();

		String dataOrdine = wkTestataDocumentoCacheModel.dataOrdine;

		if ((dataOrdine != null) && (dataOrdine.length() == 0)) {
			wkTestataDocumentoCacheModel.dataOrdine = null;
		}

		wkTestataDocumentoCacheModel.dataConsegna = getDataConsegna();

		String dataConsegna = wkTestataDocumentoCacheModel.dataConsegna;

		if ((dataConsegna != null) && (dataConsegna.length() == 0)) {
			wkTestataDocumentoCacheModel.dataConsegna = null;
		}

		wkTestataDocumentoCacheModel.destinazione = getDestinazione();

		String destinazione = wkTestataDocumentoCacheModel.destinazione;

		if ((destinazione != null) && (destinazione.length() == 0)) {
			wkTestataDocumentoCacheModel.destinazione = null;
		}

		wkTestataDocumentoCacheModel.codiceDestinazione = getCodiceDestinazione();

		String codiceDestinazione = wkTestataDocumentoCacheModel.codiceDestinazione;

		if ((codiceDestinazione != null) && (codiceDestinazione.length() == 0)) {
			wkTestataDocumentoCacheModel.codiceDestinazione = null;
		}

		wkTestataDocumentoCacheModel.ragioneSociale = getRagioneSociale();

		String ragioneSociale = wkTestataDocumentoCacheModel.ragioneSociale;

		if ((ragioneSociale != null) && (ragioneSociale.length() == 0)) {
			wkTestataDocumentoCacheModel.ragioneSociale = null;
		}

		wkTestataDocumentoCacheModel.completo = getCompleto();

		String completo = wkTestataDocumentoCacheModel.completo;

		if ((completo != null) && (completo.length() == 0)) {
			wkTestataDocumentoCacheModel.completo = null;
		}

		wkTestataDocumentoCacheModel.operatore = getOperatore();

		String operatore = wkTestataDocumentoCacheModel.operatore;

		if ((operatore != null) && (operatore.length() == 0)) {
			wkTestataDocumentoCacheModel.operatore = null;
		}

		wkTestataDocumentoCacheModel.visto = getVisto();

		wkTestataDocumentoCacheModel.inviato = getInviato();

		wkTestataDocumentoCacheModel.lotto = getLotto();

		String lotto = wkTestataDocumentoCacheModel.lotto;

		if ((lotto != null) && (lotto.length() == 0)) {
			wkTestataDocumentoCacheModel.lotto = null;
		}

		wkTestataDocumentoCacheModel.tipoDocumento = getTipoDocumento();

		String tipoDocumento = wkTestataDocumentoCacheModel.tipoDocumento;

		if ((tipoDocumento != null) && (tipoDocumento.length() == 0)) {
			wkTestataDocumentoCacheModel.tipoDocumento = null;
		}

		wkTestataDocumentoCacheModel.vettore = getVettore();

		String vettore = wkTestataDocumentoCacheModel.vettore;

		if ((vettore != null) && (vettore.length() == 0)) {
			wkTestataDocumentoCacheModel.vettore = null;
		}

		wkTestataDocumentoCacheModel.autista = getAutista();

		String autista = wkTestataDocumentoCacheModel.autista;

		if ((autista != null) && (autista.length() == 0)) {
			wkTestataDocumentoCacheModel.autista = null;
		}

		wkTestataDocumentoCacheModel.telefono = getTelefono();

		String telefono = wkTestataDocumentoCacheModel.telefono;

		if ((telefono != null) && (telefono.length() == 0)) {
			wkTestataDocumentoCacheModel.telefono = null;
		}

		wkTestataDocumentoCacheModel.centro = getCentro();

		String centro = wkTestataDocumentoCacheModel.centro;

		if ((centro != null) && (centro.length() == 0)) {
			wkTestataDocumentoCacheModel.centro = null;
		}

		wkTestataDocumentoCacheModel.palletCaricati = getPalletCaricati();

		wkTestataDocumentoCacheModel.palletScaricati = getPalletScaricati();

		wkTestataDocumentoCacheModel.codiceVettore = getCodiceVettore();

		String codiceVettore = wkTestataDocumentoCacheModel.codiceVettore;

		if ((codiceVettore != null) && (codiceVettore.length() == 0)) {
			wkTestataDocumentoCacheModel.codiceVettore = null;
		}

		wkTestataDocumentoCacheModel.destinazioneVettore = getDestinazioneVettore();

		String destinazioneVettore = wkTestataDocumentoCacheModel.destinazioneVettore;

		if ((destinazioneVettore != null) &&
				(destinazioneVettore.length() == 0)) {
			wkTestataDocumentoCacheModel.destinazioneVettore = null;
		}

		wkTestataDocumentoCacheModel.nota1 = getNota1();

		String nota1 = wkTestataDocumentoCacheModel.nota1;

		if ((nota1 != null) && (nota1.length() == 0)) {
			wkTestataDocumentoCacheModel.nota1 = null;
		}

		wkTestataDocumentoCacheModel.nota2 = getNota2();

		String nota2 = wkTestataDocumentoCacheModel.nota2;

		if ((nota2 != null) && (nota2.length() == 0)) {
			wkTestataDocumentoCacheModel.nota2 = null;
		}

		wkTestataDocumentoCacheModel.rigoDescrittivo = getRigoDescrittivo();

		String rigoDescrittivo = wkTestataDocumentoCacheModel.rigoDescrittivo;

		if ((rigoDescrittivo != null) && (rigoDescrittivo.length() == 0)) {
			wkTestataDocumentoCacheModel.rigoDescrittivo = null;
		}

		wkTestataDocumentoCacheModel.vettore2 = getVettore2();

		String vettore2 = wkTestataDocumentoCacheModel.vettore2;

		if ((vettore2 != null) && (vettore2.length() == 0)) {
			wkTestataDocumentoCacheModel.vettore2 = null;
		}

		wkTestataDocumentoCacheModel.curaTrasporto = getCuraTrasporto();

		String curaTrasporto = wkTestataDocumentoCacheModel.curaTrasporto;

		if ((curaTrasporto != null) && (curaTrasporto.length() == 0)) {
			wkTestataDocumentoCacheModel.curaTrasporto = null;
		}

		wkTestataDocumentoCacheModel.aspettoEsteriore = getAspettoEsteriore();

		String aspettoEsteriore = wkTestataDocumentoCacheModel.aspettoEsteriore;

		if ((aspettoEsteriore != null) && (aspettoEsteriore.length() == 0)) {
			wkTestataDocumentoCacheModel.aspettoEsteriore = null;
		}

		wkTestataDocumentoCacheModel.causaleTrasporto = getCausaleTrasporto();

		String causaleTrasporto = wkTestataDocumentoCacheModel.causaleTrasporto;

		if ((causaleTrasporto != null) && (causaleTrasporto.length() == 0)) {
			wkTestataDocumentoCacheModel.causaleTrasporto = null;
		}

		wkTestataDocumentoCacheModel.porto = getPorto();

		String porto = wkTestataDocumentoCacheModel.porto;

		if ((porto != null) && (porto.length() == 0)) {
			wkTestataDocumentoCacheModel.porto = null;
		}

		wkTestataDocumentoCacheModel.origine = getOrigine();

		String origine = wkTestataDocumentoCacheModel.origine;

		if ((origine != null) && (origine.length() == 0)) {
			wkTestataDocumentoCacheModel.origine = null;
		}

		wkTestataDocumentoCacheModel.numeroPedaneEuro = getNumeroPedaneEuro();

		wkTestataDocumentoCacheModel.numeroPedaneNormali = getNumeroPedaneNormali();

		wkTestataDocumentoCacheModel.costoTrasporto = getCostoTrasporto();

		wkTestataDocumentoCacheModel.totalePedaneOrdine = getTotalePedaneOrdine();

		wkTestataDocumentoCacheModel.targaCamion = getTargaCamion();

		String targaCamion = wkTestataDocumentoCacheModel.targaCamion;

		if ((targaCamion != null) && (targaCamion.length() == 0)) {
			wkTestataDocumentoCacheModel.targaCamion = null;
		}

		wkTestataDocumentoCacheModel.targaRimorchio = getTargaRimorchio();

		String targaRimorchio = wkTestataDocumentoCacheModel.targaRimorchio;

		if ((targaRimorchio != null) && (targaRimorchio.length() == 0)) {
			wkTestataDocumentoCacheModel.targaRimorchio = null;
		}

		wkTestataDocumentoCacheModel.idAssociato = getIdAssociato();

		wkTestataDocumentoCacheModel.verificato = getVerificato();

		return wkTestataDocumentoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(79);

		sb.append("{anno=");
		sb.append(getAnno());
		sb.append(", numeroOrdine=");
		sb.append(getNumeroOrdine());
		sb.append(", codiceSoggetto=");
		sb.append(getCodiceSoggetto());
		sb.append(", dataOrdine=");
		sb.append(getDataOrdine());
		sb.append(", dataConsegna=");
		sb.append(getDataConsegna());
		sb.append(", destinazione=");
		sb.append(getDestinazione());
		sb.append(", codiceDestinazione=");
		sb.append(getCodiceDestinazione());
		sb.append(", ragioneSociale=");
		sb.append(getRagioneSociale());
		sb.append(", completo=");
		sb.append(getCompleto());
		sb.append(", operatore=");
		sb.append(getOperatore());
		sb.append(", visto=");
		sb.append(getVisto());
		sb.append(", inviato=");
		sb.append(getInviato());
		sb.append(", lotto=");
		sb.append(getLotto());
		sb.append(", tipoDocumento=");
		sb.append(getTipoDocumento());
		sb.append(", vettore=");
		sb.append(getVettore());
		sb.append(", autista=");
		sb.append(getAutista());
		sb.append(", telefono=");
		sb.append(getTelefono());
		sb.append(", centro=");
		sb.append(getCentro());
		sb.append(", palletCaricati=");
		sb.append(getPalletCaricati());
		sb.append(", palletScaricati=");
		sb.append(getPalletScaricati());
		sb.append(", codiceVettore=");
		sb.append(getCodiceVettore());
		sb.append(", destinazioneVettore=");
		sb.append(getDestinazioneVettore());
		sb.append(", nota1=");
		sb.append(getNota1());
		sb.append(", nota2=");
		sb.append(getNota2());
		sb.append(", rigoDescrittivo=");
		sb.append(getRigoDescrittivo());
		sb.append(", vettore2=");
		sb.append(getVettore2());
		sb.append(", curaTrasporto=");
		sb.append(getCuraTrasporto());
		sb.append(", aspettoEsteriore=");
		sb.append(getAspettoEsteriore());
		sb.append(", causaleTrasporto=");
		sb.append(getCausaleTrasporto());
		sb.append(", porto=");
		sb.append(getPorto());
		sb.append(", origine=");
		sb.append(getOrigine());
		sb.append(", numeroPedaneEuro=");
		sb.append(getNumeroPedaneEuro());
		sb.append(", numeroPedaneNormali=");
		sb.append(getNumeroPedaneNormali());
		sb.append(", costoTrasporto=");
		sb.append(getCostoTrasporto());
		sb.append(", totalePedaneOrdine=");
		sb.append(getTotalePedaneOrdine());
		sb.append(", targaCamion=");
		sb.append(getTargaCamion());
		sb.append(", targaRimorchio=");
		sb.append(getTargaRimorchio());
		sb.append(", idAssociato=");
		sb.append(getIdAssociato());
		sb.append(", verificato=");
		sb.append(getVerificato());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(121);

		sb.append("<model><model-name>");
		sb.append("it.bysoftware.ct.model.WKTestataDocumento");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>anno</column-name><column-value><![CDATA[");
		sb.append(getAnno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numeroOrdine</column-name><column-value><![CDATA[");
		sb.append(getNumeroOrdine());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codiceSoggetto</column-name><column-value><![CDATA[");
		sb.append(getCodiceSoggetto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataOrdine</column-name><column-value><![CDATA[");
		sb.append(getDataOrdine());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataConsegna</column-name><column-value><![CDATA[");
		sb.append(getDataConsegna());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>destinazione</column-name><column-value><![CDATA[");
		sb.append(getDestinazione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codiceDestinazione</column-name><column-value><![CDATA[");
		sb.append(getCodiceDestinazione());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ragioneSociale</column-name><column-value><![CDATA[");
		sb.append(getRagioneSociale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>completo</column-name><column-value><![CDATA[");
		sb.append(getCompleto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>operatore</column-name><column-value><![CDATA[");
		sb.append(getOperatore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visto</column-name><column-value><![CDATA[");
		sb.append(getVisto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inviato</column-name><column-value><![CDATA[");
		sb.append(getInviato());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lotto</column-name><column-value><![CDATA[");
		sb.append(getLotto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tipoDocumento</column-name><column-value><![CDATA[");
		sb.append(getTipoDocumento());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vettore</column-name><column-value><![CDATA[");
		sb.append(getVettore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>autista</column-name><column-value><![CDATA[");
		sb.append(getAutista());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>telefono</column-name><column-value><![CDATA[");
		sb.append(getTelefono());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>centro</column-name><column-value><![CDATA[");
		sb.append(getCentro());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>palletCaricati</column-name><column-value><![CDATA[");
		sb.append(getPalletCaricati());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>palletScaricati</column-name><column-value><![CDATA[");
		sb.append(getPalletScaricati());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codiceVettore</column-name><column-value><![CDATA[");
		sb.append(getCodiceVettore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>destinazioneVettore</column-name><column-value><![CDATA[");
		sb.append(getDestinazioneVettore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nota1</column-name><column-value><![CDATA[");
		sb.append(getNota1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nota2</column-name><column-value><![CDATA[");
		sb.append(getNota2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rigoDescrittivo</column-name><column-value><![CDATA[");
		sb.append(getRigoDescrittivo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vettore2</column-name><column-value><![CDATA[");
		sb.append(getVettore2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>curaTrasporto</column-name><column-value><![CDATA[");
		sb.append(getCuraTrasporto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aspettoEsteriore</column-name><column-value><![CDATA[");
		sb.append(getAspettoEsteriore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>causaleTrasporto</column-name><column-value><![CDATA[");
		sb.append(getCausaleTrasporto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>porto</column-name><column-value><![CDATA[");
		sb.append(getPorto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>origine</column-name><column-value><![CDATA[");
		sb.append(getOrigine());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numeroPedaneEuro</column-name><column-value><![CDATA[");
		sb.append(getNumeroPedaneEuro());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numeroPedaneNormali</column-name><column-value><![CDATA[");
		sb.append(getNumeroPedaneNormali());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>costoTrasporto</column-name><column-value><![CDATA[");
		sb.append(getCostoTrasporto());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalePedaneOrdine</column-name><column-value><![CDATA[");
		sb.append(getTotalePedaneOrdine());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targaCamion</column-name><column-value><![CDATA[");
		sb.append(getTargaCamion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targaRimorchio</column-name><column-value><![CDATA[");
		sb.append(getTargaRimorchio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idAssociato</column-name><column-value><![CDATA[");
		sb.append(getIdAssociato());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>verificato</column-name><column-value><![CDATA[");
		sb.append(getVerificato());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WKTestataDocumento.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WKTestataDocumento.class
		};
	private int _anno;
	private int _originalAnno;
	private boolean _setOriginalAnno;
	private long _numeroOrdine;
	private String _codiceSoggetto;
	private String _dataOrdine;
	private String _dataConsegna;
	private String _destinazione;
	private String _codiceDestinazione;
	private String _ragioneSociale;
	private String _completo;
	private String _operatore;
	private int _visto;
	private int _inviato;
	private String _lotto;
	private String _tipoDocumento;
	private String _vettore;
	private String _autista;
	private String _telefono;
	private String _centro;
	private int _palletCaricati;
	private int _palletScaricati;
	private String _codiceVettore;
	private String _destinazioneVettore;
	private String _nota1;
	private String _nota2;
	private String _rigoDescrittivo;
	private String _vettore2;
	private String _curaTrasporto;
	private String _aspettoEsteriore;
	private String _causaleTrasporto;
	private String _porto;
	private String _origine;
	private int _numeroPedaneEuro;
	private int _numeroPedaneNormali;
	private double _costoTrasporto;
	private int _totalePedaneOrdine;
	private String _targaCamion;
	private String _targaRimorchio;
	private long _idAssociato;
	private long _originalIdAssociato;
	private boolean _setOriginalIdAssociato;
	private boolean _verificato;
	private boolean _originalVerificato;
	private boolean _setOriginalVerificato;
	private long _columnBitmask;
	private WKTestataDocumento _escapedModel;
}