/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.bysoftware.ct.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import it.bysoftware.ct.model.DescrizioniVarianti;
import it.bysoftware.ct.model.DescrizioniVariantiModel;
import it.bysoftware.ct.model.DescrizioniVariantiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DescrizioniVarianti service. Represents a row in the &quot;DescrizioniVarianti&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.bysoftware.ct.model.DescrizioniVariantiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DescrizioniVariantiImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DescrizioniVariantiImpl
 * @see it.bysoftware.ct.model.DescrizioniVarianti
 * @see it.bysoftware.ct.model.DescrizioniVariantiModel
 * @generated
 */
@JSON(strict = true)
public class DescrizioniVariantiModelImpl extends BaseModelImpl<DescrizioniVarianti>
	implements DescrizioniVariantiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a descrizioni varianti model instance should use the {@link it.bysoftware.ct.model.DescrizioniVarianti} interface instead.
	 */
	public static final String TABLE_NAME = "DescrizioniVarianti";
	public static final Object[][] TABLE_COLUMNS = {
			{ "CvdCodvar", Types.VARCHAR },
			{ "CvdDescri", Types.VARCHAR },
			{ "CvdOrdine", Types.INTEGER },
			{ "CvdTipvar", Types.VARCHAR },
			{ "CvdCodiaz", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DescrizioniVarianti (CvdCodvar VARCHAR(75) not null primary key,CvdDescri VARCHAR(75) null,CvdOrdine INTEGER,CvdTipvar VARCHAR(75) null,CvdCodiaz VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DescrizioniVarianti";
	public static final String ORDER_BY_JPQL = " ORDER BY descrizioniVarianti.codiceVariante ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DescrizioniVarianti.CvdCodvar ASC";
	public static final String DATA_SOURCE = "gestionaleOPDataSource";
	public static final String SESSION_FACTORY = "gestionaleOPSessionFactory";
	public static final String TX_MANAGER = "gestionaleOPTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.bysoftware.ct.model.DescrizioniVarianti"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.bysoftware.ct.model.DescrizioniVarianti"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DescrizioniVarianti toModel(DescrizioniVariantiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DescrizioniVarianti model = new DescrizioniVariantiImpl();

		model.setCodiceVariante(soapModel.getCodiceVariante());
		model.setDescrizioneVariante(soapModel.getDescrizioneVariante());
		model.setOrdine(soapModel.getOrdine());
		model.setTipoVariante(soapModel.getTipoVariante());
		model.setCodiceAzienda(soapModel.getCodiceAzienda());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DescrizioniVarianti> toModels(
		DescrizioniVariantiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DescrizioniVarianti> models = new ArrayList<DescrizioniVarianti>(soapModels.length);

		for (DescrizioniVariantiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.bysoftware.ct.model.DescrizioniVarianti"));

	public DescrizioniVariantiModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _codiceVariante;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setCodiceVariante(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _codiceVariante;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DescrizioniVarianti.class;
	}

	@Override
	public String getModelClassName() {
		return DescrizioniVarianti.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("codiceVariante", getCodiceVariante());
		attributes.put("descrizioneVariante", getDescrizioneVariante());
		attributes.put("ordine", getOrdine());
		attributes.put("tipoVariante", getTipoVariante());
		attributes.put("codiceAzienda", getCodiceAzienda());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String codiceVariante = (String)attributes.get("codiceVariante");

		if (codiceVariante != null) {
			setCodiceVariante(codiceVariante);
		}

		String descrizioneVariante = (String)attributes.get(
				"descrizioneVariante");

		if (descrizioneVariante != null) {
			setDescrizioneVariante(descrizioneVariante);
		}

		Integer ordine = (Integer)attributes.get("ordine");

		if (ordine != null) {
			setOrdine(ordine);
		}

		String tipoVariante = (String)attributes.get("tipoVariante");

		if (tipoVariante != null) {
			setTipoVariante(tipoVariante);
		}

		String codiceAzienda = (String)attributes.get("codiceAzienda");

		if (codiceAzienda != null) {
			setCodiceAzienda(codiceAzienda);
		}
	}

	@JSON
	@Override
	public String getCodiceVariante() {
		if (_codiceVariante == null) {
			return StringPool.BLANK;
		}
		else {
			return _codiceVariante;
		}
	}

	@Override
	public void setCodiceVariante(String codiceVariante) {
		_codiceVariante = codiceVariante;
	}

	@JSON
	@Override
	public String getDescrizioneVariante() {
		if (_descrizioneVariante == null) {
			return StringPool.BLANK;
		}
		else {
			return _descrizioneVariante;
		}
	}

	@Override
	public void setDescrizioneVariante(String descrizioneVariante) {
		_descrizioneVariante = descrizioneVariante;
	}

	@JSON
	@Override
	public int getOrdine() {
		return _ordine;
	}

	@Override
	public void setOrdine(int ordine) {
		_ordine = ordine;
	}

	@JSON
	@Override
	public String getTipoVariante() {
		if (_tipoVariante == null) {
			return StringPool.BLANK;
		}
		else {
			return _tipoVariante;
		}
	}

	@Override
	public void setTipoVariante(String tipoVariante) {
		_tipoVariante = tipoVariante;
	}

	@JSON
	@Override
	public String getCodiceAzienda() {
		if (_codiceAzienda == null) {
			return StringPool.BLANK;
		}
		else {
			return _codiceAzienda;
		}
	}

	@Override
	public void setCodiceAzienda(String codiceAzienda) {
		_codiceAzienda = codiceAzienda;
	}

	@Override
	public DescrizioniVarianti toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DescrizioniVarianti)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DescrizioniVariantiImpl descrizioniVariantiImpl = new DescrizioniVariantiImpl();

		descrizioniVariantiImpl.setCodiceVariante(getCodiceVariante());
		descrizioniVariantiImpl.setDescrizioneVariante(getDescrizioneVariante());
		descrizioniVariantiImpl.setOrdine(getOrdine());
		descrizioniVariantiImpl.setTipoVariante(getTipoVariante());
		descrizioniVariantiImpl.setCodiceAzienda(getCodiceAzienda());

		descrizioniVariantiImpl.resetOriginalValues();

		return descrizioniVariantiImpl;
	}

	@Override
	public int compareTo(DescrizioniVarianti descrizioniVarianti) {
		String primaryKey = descrizioniVarianti.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DescrizioniVarianti)) {
			return false;
		}

		DescrizioniVarianti descrizioniVarianti = (DescrizioniVarianti)obj;

		String primaryKey = descrizioniVarianti.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DescrizioniVarianti> toCacheModel() {
		DescrizioniVariantiCacheModel descrizioniVariantiCacheModel = new DescrizioniVariantiCacheModel();

		descrizioniVariantiCacheModel.codiceVariante = getCodiceVariante();

		String codiceVariante = descrizioniVariantiCacheModel.codiceVariante;

		if ((codiceVariante != null) && (codiceVariante.length() == 0)) {
			descrizioniVariantiCacheModel.codiceVariante = null;
		}

		descrizioniVariantiCacheModel.descrizioneVariante = getDescrizioneVariante();

		String descrizioneVariante = descrizioniVariantiCacheModel.descrizioneVariante;

		if ((descrizioneVariante != null) &&
				(descrizioneVariante.length() == 0)) {
			descrizioniVariantiCacheModel.descrizioneVariante = null;
		}

		descrizioniVariantiCacheModel.ordine = getOrdine();

		descrizioniVariantiCacheModel.tipoVariante = getTipoVariante();

		String tipoVariante = descrizioniVariantiCacheModel.tipoVariante;

		if ((tipoVariante != null) && (tipoVariante.length() == 0)) {
			descrizioniVariantiCacheModel.tipoVariante = null;
		}

		descrizioniVariantiCacheModel.codiceAzienda = getCodiceAzienda();

		String codiceAzienda = descrizioniVariantiCacheModel.codiceAzienda;

		if ((codiceAzienda != null) && (codiceAzienda.length() == 0)) {
			descrizioniVariantiCacheModel.codiceAzienda = null;
		}

		return descrizioniVariantiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{codiceVariante=");
		sb.append(getCodiceVariante());
		sb.append(", descrizioneVariante=");
		sb.append(getDescrizioneVariante());
		sb.append(", ordine=");
		sb.append(getOrdine());
		sb.append(", tipoVariante=");
		sb.append(getTipoVariante());
		sb.append(", codiceAzienda=");
		sb.append(getCodiceAzienda());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("it.bysoftware.ct.model.DescrizioniVarianti");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>codiceVariante</column-name><column-value><![CDATA[");
		sb.append(getCodiceVariante());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descrizioneVariante</column-name><column-value><![CDATA[");
		sb.append(getDescrizioneVariante());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ordine</column-name><column-value><![CDATA[");
		sb.append(getOrdine());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tipoVariante</column-name><column-value><![CDATA[");
		sb.append(getTipoVariante());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codiceAzienda</column-name><column-value><![CDATA[");
		sb.append(getCodiceAzienda());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DescrizioniVarianti.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DescrizioniVarianti.class
		};
	private String _codiceVariante;
	private String _descrizioneVariante;
	private int _ordine;
	private String _tipoVariante;
	private String _codiceAzienda;
	private DescrizioniVarianti _escapedModel;
}